name: Deploy to Production (Namecheap)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configure git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run tests and build
      run: |
        npm run check || echo "TypeScript check completed with warnings"
        npm run build
        
    - name: Verify build output
      run: |
        ls -la dist/
        test -f dist/index.js || exit 1
        
    - name: Deploy to Namecheap VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          set -e
          
          # Configuration
          APP_DIR="/var/www/olalaundry"
          APP_NAME="olalaundry"
          BACKUP_DIR="/var/backups/olalaundry"
          
          echo "üöÄ Starting deployment..."
          
          # Create backup
          mkdir -p $BACKUP_DIR
          if [ -d "$APP_DIR" ]; then
            echo "üì¶ Creating backup..."
            tar -czf $BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).tar.gz -C $APP_DIR .
          fi
          
          # Create app directory if it doesn't exist
          sudo mkdir -p $APP_DIR /var/log/olalaundry
          sudo chown -R $USER:$USER $APP_DIR /var/log/olalaundry
          
          # Clone or update repository
          if [ -d "$APP_DIR/.git" ]; then
            echo "üîÑ Updating repository..."
            cd $APP_DIR
            git fetch origin
            git reset --hard origin/main
          else
            echo "üì• Cloning repository..."
            git clone https://github.com/sajidabbas3156/Olalaundry-prod.git $APP_DIR
            cd $APP_DIR
          fi
          
          # Set environment variables
          export NODE_ENV=production
          export PORT=5000
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          
          # Install dependencies and build
          echo "üì¶ Installing dependencies..."
          npm install --legacy-peer-deps
          
          echo "üî® Building application..."
          npm run build
          
          # Verify build
          if [ ! -d "dist" ] || [ ! -f "dist/index.js" ]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi
          
          # Database backup
          if [ -f ".env" ] && grep -q "DATABASE_URL" .env; then
            echo "üíæ Backing up database..."
            source .env
            pg_dump $DATABASE_URL > $BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo "‚ö†Ô∏è Database backup failed"
          fi
          
          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          npm run db:push
          
          # Deploy with PM2
          echo "üöÄ Deploying with PM2..."
          
          # Install PM2 if not present
          which pm2 || sudo npm install -g pm2
          
          # Stop existing process
          pm2 stop $APP_NAME 2>/dev/null || echo "No existing process to stop"
          
          # Start new process
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          # Health check
          echo "üè• Performing health check..."
          sleep 10
          
          # Check PM2 status
          pm2 status | grep -q $APP_NAME || {
            echo "‚ùå PM2 process not running"
            pm2 logs $APP_NAME --lines 20
            exit 1
          }
          
          # Check health endpoint
          curl -f http://localhost:5000 || {
            echo "‚ùå Health check failed"
            pm2 logs $APP_NAME --lines 20
            exit 1
          }
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Show status
          pm2 status
          echo "üåê Application should be available at: https://www.olalaundry.com"
          
    - name: Run smoke tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          cd /var/www/olalaundry
          if [ -f "scripts/smoke-test.sh" ]; then
            echo "üß™ Running smoke tests..."
            ./scripts/smoke-test.sh http://localhost:5000 || echo "‚ö†Ô∏è Some smoke tests failed"
          else
            echo "‚ö†Ô∏è Smoke test script not found"
          fi
          
    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          echo "üìä Deployment Status Report"
          echo "=========================="
          echo "Time: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "PM2 Status:"
          pm2 status
          echo ""
          echo "Health Check:"
          curl -s http://localhost:5000 | head -5 || echo "Health check failed"
          echo ""
          echo "Recent Logs:"
          pm2 logs olalaundry --lines 10 --nostream